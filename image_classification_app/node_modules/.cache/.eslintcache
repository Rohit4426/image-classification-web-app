[{"C:\\Users\\HP\\Downloads\\Image-classification-App-main\\Image-classification-App-main\\image_classification_app\\src\\index.js":"1","C:\\Users\\HP\\Downloads\\Image-classification-App-main\\Image-classification-App-main\\image_classification_app\\src\\App.js":"2"},{"size":223,"mtime":1619363458725,"results":"3","hashOfConfig":"4"},{"size":3938,"mtime":1619366355278,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15d4o02",{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"C:\\Users\\HP\\Downloads\\Image-classification-App-main\\Image-classification-App-main\\image_classification_app\\src\\index.js",[],"C:\\Users\\HP\\Downloads\\Image-classification-App-main\\Image-classification-App-main\\image_classification_app\\src\\App.js",["11"],"import { useState, useEffect, useRef } from 'react';\nimport * as mobilenet from \"@tensorflow-models/mobilenet\";\n\nfunction App() {\n    const [isModelLoading, setIsModelLoading] = useState(false)\n    const [model, setModel] = useState(null)\n    const [imageURL, setImageURL] = useState(null);\n    const [results, setResults] = useState([])\n    const [history, setHistory] = useState([])\n\n    const imageRef = useRef()\n    const textInputRef = useRef()\n    const fileInputRef = useRef()\n\n    const loadModel = async () => {\n        setIsModelLoading(true)\n        try {\n            const model = await mobilenet.load()\n            setModel(model)\n            setIsModelLoading(false)\n        } catch (error) {\n            console.log(error)\n            setIsModelLoading(false)\n        }\n    }\n\n    const uploadImage = (e) => {\n        const { files } = e.target\n        if (files.length > 0) {\n            const url = URL.createObjectURL(files[0])\n            setImageURL(url)\n        } else {\n            setImageURL(null)\n        }\n    }\n\n    const identify = async () => {\n        textInputRef.current.value = ''\n        const results = await model.classify(imageRef.current)\n        setResults(results)\n    }\n\n    const handleOnChange = (e) => {\n        setImageURL(e.target.value)\n        setResults([])\n    }\n\n    const triggerUpload = () => {\n        fileInputRef.current.click()\n    }\n\n    useEffect(() => {\n        loadModel()\n    }, [])\n\n    useEffect(() => {\n        if (imageURL) {\n            setHistory([imageURL, ...history])\n        }\n    }, [imageURL])\n\n    if (isModelLoading) {\n        return <h2 className='modelLoader'>Model is Loading...</h2>\n    }\n\n    return (\n        <div className=\"App\">\n            <h1 className='header'>Single Image Classification</h1>\n            <div className='inputHolder'>\n                <input type='file' accept='image/*' capture='camera' className='uploadInput' onChange={uploadImage} ref={fileInputRef} />\n                <button className='uploadImage' onClick={triggerUpload}>Upload an Image</button>\n                <span className='or'>Or</span>\n                <input type=\"text\" placeholder='Paste image URL' ref={textInputRef} onChange={handleOnChange} />\n            </div>\n            <div className=\"mainWrapper\">\n                <div className=\"mainContent\">\n                    <div className=\"imageHolder\">\n                        {imageURL && <img src={imageURL} alt=\"Upload Preview\" crossOrigin=\"anonymous\" ref={imageRef} />}\n                    </div>\n                    {results.length > 0 && <div className='resultsHolder'>\n                        {results.map((result, index) => {\n                            return (\n                                <div className='result' key={result.className}>\n                                    <span className='name'>{result.className}</span>\n                                    <span className='confidence'>Confidence level: {(result.probability * 100).toFixed(2)}% {index === 0 && <span className='bestGuess'>Best Prediction</span>}</span>\n                                </div>\n                            )\n                        })}\n                    </div>}\n                </div>\n                {imageURL && <button className='button' onClick={identify}>Identify Image</button>}\n            </div>\n            {history.length > 0 && <div className=\"recentPredictions\">\n                <h2>Recent Images</h2>\n                <div className=\"recentImages\">\n                    {history.map((image, index) => {\n                        return (\n                            <div className=\"recentPrediction\" key={`${image}${index}`}>\n                                <img src={image} alt='Recent Prediction' onClick={() => setImageURL(image)} />\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>}\n        </div>\n    );\n}\n\nexport default App;",{"ruleId":"12","severity":1,"message":"13","line":60,"column":8,"nodeType":"14","endLine":60,"endColumn":18,"suggestions":"15"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array. You can also do a functional update 'setHistory(h => ...)' if you only need 'history' in the 'setHistory' call.","ArrayExpression",["16"],{"desc":"17","fix":"18"},"Update the dependencies array to be: [history, imageURL]",{"range":"19","text":"20"},[1556,1566],"[history, imageURL]"]