{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Downloads\\\\Image-classification-App-main\\\\Image-classification-App-main\\\\image_classification_app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from 'react';\nimport * as mobilenet from \"@tensorflow-models/mobilenet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [isModelLoading, setIsModelLoading] = useState(false);\n  const [model, setModel] = useState(null);\n  const [imageURL, setImageURL] = useState(null);\n  const [results, setResults] = useState([]);\n  const [history, setHistory] = useState([]);\n  const imageRef = useRef();\n  const textInputRef = useRef();\n  const fileInputRef = useRef();\n\n  const loadModel = async () => {\n    setIsModelLoading(true);\n\n    try {\n      const model = await mobilenet.load();\n      setModel(model);\n      setIsModelLoading(false);\n    } catch (error) {\n      console.log(error);\n      setIsModelLoading(false);\n    }\n  };\n\n  const uploadImage = e => {\n    const {\n      files\n    } = e.target;\n\n    if (files.length > 0) {\n      const url = URL.createObjectURL(files[0]);\n      setImageURL(url);\n    } else {\n      setImageURL(null);\n    }\n  };\n\n  const identify = async () => {\n    textInputRef.current.value = '';\n    const results = await model.classify(imageRef.current);\n    setResults(results);\n  };\n\n  const handleOnChange = e => {\n    setImageURL(e.target.value);\n    setResults([]);\n  };\n\n  const triggerUpload = () => {\n    fileInputRef.current.click();\n  };\n\n  useEffect(() => {\n    loadModel();\n  }, []);\n  useEffect(() => {\n    if (imageURL) {\n      setHistory([imageURL, ...history]);\n    }\n  }, [imageURL]);\n\n  if (isModelLoading) {\n    return /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"modelLoader\",\n      children: \"Model is Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"header\",\n      children: \"Single Image Classification\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inputHolder\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        capture: \"camera\",\n        className: \"uploadInput\",\n        onChange: uploadImage,\n        ref: fileInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"uploadImage\",\n        onClick: triggerUpload,\n        children: \"Upload an Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"or\",\n        children: \"Or\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Paste image URL\",\n        ref: textInputRef,\n        onChange: handleOnChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mainWrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mainContent\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"imageHolder\",\n          children: imageURL && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: imageURL,\n            alt: \"Upload Preview\",\n            crossOrigin: \"anonymous\",\n            ref: imageRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 38\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), results.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"resultsHolder\",\n          children: results.map((result, index) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"result\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"name\",\n                children: result.className\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"confidence\",\n                children: [\"Confidence level: \", (result.probability * 100).toFixed(2), \"% \", index === 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"bestGuess\",\n                  children: \"Best Prediction\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 85,\n                  columnNumber: 141\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 37\n              }, this)]\n            }, result.className, true, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 44\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), imageURL && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        onClick: identify,\n        children: \"Identify Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), history.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recentPredictions\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Recent Images\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recentImages\",\n        children: history.map((image, index) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"recentPrediction\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: image,\n              alt: \"Recent Prediction\",\n              onClick: () => setImageURL(image)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 33\n            }, this)\n          }, `${image}${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 36\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"W9ua+0xnb4F0CTW6FU3pq6PEm3Y=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/HP/Downloads/Image-classification-App-main/Image-classification-App-main/image_classification_app/src/App.js"],"names":["useState","useEffect","useRef","mobilenet","App","isModelLoading","setIsModelLoading","model","setModel","imageURL","setImageURL","results","setResults","history","setHistory","imageRef","textInputRef","fileInputRef","loadModel","load","error","console","log","uploadImage","e","files","target","length","url","URL","createObjectURL","identify","current","value","classify","handleOnChange","triggerUpload","click","map","result","index","className","probability","toFixed","image"],"mappings":"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","sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport * as mobilenet from \"@tensorflow-models/mobilenet\";\n\nfunction App() {\n    const [isModelLoading, setIsModelLoading] = useState(false)\n    const [model, setModel] = useState(null)\n    const [imageURL, setImageURL] = useState(null);\n    const [results, setResults] = useState([])\n    const [history, setHistory] = useState([])\n\n    const imageRef = useRef()\n    const textInputRef = useRef()\n    const fileInputRef = useRef()\n\n    const loadModel = async () => {\n        setIsModelLoading(true)\n        try {\n            const model = await mobilenet.load()\n            setModel(model)\n            setIsModelLoading(false)\n        } catch (error) {\n            console.log(error)\n            setIsModelLoading(false)\n        }\n    }\n\n    const uploadImage = (e) => {\n        const { files } = e.target\n        if (files.length > 0) {\n            const url = URL.createObjectURL(files[0])\n            setImageURL(url)\n        } else {\n            setImageURL(null)\n        }\n    }\n\n    const identify = async () => {\n        textInputRef.current.value = ''\n        const results = await model.classify(imageRef.current)\n        setResults(results)\n    }\n\n    const handleOnChange = (e) => {\n        setImageURL(e.target.value)\n        setResults([])\n    }\n\n    const triggerUpload = () => {\n        fileInputRef.current.click()\n    }\n\n    useEffect(() => {\n        loadModel()\n    }, [])\n\n    useEffect(() => {\n        if (imageURL) {\n            setHistory([imageURL, ...history])\n        }\n    }, [imageURL])\n\n    if (isModelLoading) {\n        return <h2 className='modelLoader'>Model is Loading...</h2>\n    }\n\n    return (\n        <div className=\"App\">\n            <h1 className='header'>Single Image Classification</h1>\n            <div className='inputHolder'>\n                <input type='file' accept='image/*' capture='camera' className='uploadInput' onChange={uploadImage} ref={fileInputRef} />\n                <button className='uploadImage' onClick={triggerUpload}>Upload an Image</button>\n                <span className='or'>Or</span>\n                <input type=\"text\" placeholder='Paste image URL' ref={textInputRef} onChange={handleOnChange} />\n            </div>\n            <div className=\"mainWrapper\">\n                <div className=\"mainContent\">\n                    <div className=\"imageHolder\">\n                        {imageURL && <img src={imageURL} alt=\"Upload Preview\" crossOrigin=\"anonymous\" ref={imageRef} />}\n                    </div>\n                    {results.length > 0 && <div className='resultsHolder'>\n                        {results.map((result, index) => {\n                            return (\n                                <div className='result' key={result.className}>\n                                    <span className='name'>{result.className}</span>\n                                    <span className='confidence'>Confidence level: {(result.probability * 100).toFixed(2)}% {index === 0 && <span className='bestGuess'>Best Prediction</span>}</span>\n                                </div>\n                            )\n                        })}\n                    </div>}\n                </div>\n                {imageURL && <button className='button' onClick={identify}>Identify Image</button>}\n            </div>\n            {history.length > 0 && <div className=\"recentPredictions\">\n                <h2>Recent Images</h2>\n                <div className=\"recentImages\">\n                    {history.map((image, index) => {\n                        return (\n                            <div className=\"recentPrediction\" key={`${image}${index}`}>\n                                <img src={image} alt='Recent Prediction' onClick={() => setImageURL(image)} />\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>}\n        </div>\n    );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}